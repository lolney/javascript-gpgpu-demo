{"version":3,"sources":["CompletionGrid/Base/styles.module.css","workers/worker.worker.ts","workers/gpuworker.worker.ts","CompletionGrid/Base/index.tsx","CompletionGrid/BaseWorker/index.tsx","CompletionGrid/Vanilla/index.tsx","CompletionGrid/GPGPU/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Worker","CompletionCell","completed","CompletionGrid","completedCount","totalCount","className","styles","grid","Array","fill","map","_","i","key","CompletionGridWorker","isStarted","worker","useState","updateCount","useEffect","postMessage","onmessage","CompletionGridNormal","CompletionGridGPGPU","App","setIsStarted","disabled","onClick","Vanilla","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mHACAA,EAAOC,QAAU,CAAC,KAAO,uB,gBCDzBD,EAAOC,QAAU,WACf,OAAO,IAAIC,OAAO,IAA0B,oC,gBCD9CF,EAAOC,QAAU,WACf,OAAO,IAAIC,OAAO,IAA0B,oC,gLCWxCC,EAAgD,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACpD,6BAAMA,EAAY,IAAM,MAGbC,EAAgD,SAAC,GAAD,IAC3DC,EAD2D,EAC3DA,eACAC,EAF2D,EAE3DA,WAF2D,OAI3D,yBAAKC,UAAWC,IAAOC,MACpBC,MAAML,GACJM,KAAK,GACLC,KAAI,SAACC,EAAGC,GAAJ,OACH,kBAAC,EAAD,CAAgBX,WAAS,EAACY,IAAKD,OAElCJ,MAAMJ,EAAaD,GACjBM,KAAK,GACLC,KAAI,SAACC,EAAGC,GAAJ,OACH,kBAAC,EAAD,CAAgBC,IAAKD,SCFdE,EAlBmD,SAAC,GAG5D,IAFLC,EAEI,EAFJA,UACAC,EACI,EADJA,OACI,EACkCC,mBAAS,GAD3C,mBACGd,EADH,KACmBe,EADnB,KAYJ,OATAC,qBAAU,WACLJ,GAAWC,EAAOI,YAAY,WAChC,CAACJ,EAAQD,IAEZI,qBAAU,WACRH,EAAOK,UAAY,kBACjBH,GAAY,SAACf,GAAD,OAA4BA,EAAiB,QAC1D,CAACa,IAEG,kBAAC,EAAD,CAAgBb,eAAgBA,EAAgBC,WAAY,O,OClB/DY,EAAS,I,OAAIjB,GAMJuB,EAJgD,SAAC,GAAD,IAAEP,EAAF,EAAEA,UAAF,OAC7D,kBAAC,EAAD,CAAsBA,UAAWA,EAAWC,OAAQA,K,OCJhDA,EAAS,I,OAAIjB,GAMJwB,EAJ6C,SAAC,GAAD,IAAER,EAAF,EAAEA,UAAF,OAC1D,kBAAC,EAAD,CAAsBA,UAAWA,EAAWC,OAAQA,KCoBvCQ,G,MAtBO,WAAO,IAAD,EACQP,oBAAS,GADjB,mBACnBF,EADmB,KACRU,EADQ,KAI1B,OACE,4BAAQpB,UAAU,QAChB,oCACA,4BAAQqB,SAAUX,EAAWY,QALnB,kBAAMF,GAAa,KAK7B,SACA,yBAAKpB,UAAU,kBACb,yBAAKA,UAAU,gBACb,kDACA,kBAACuB,EAAD,CAAuBb,UAAWA,KAEpC,yBAAKV,UAAU,gBACb,4CACA,kBAAC,EAAD,CAAqBU,UAAWA,SCTtBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c0326de5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"styles_grid__1Zp-5\"};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"fb2bf3f7558605f272d4.worker.js\");\n};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"5a408f7d1736c889b51f.worker.js\");\n};","import React from \"react\";\nimport styles from \"./styles.module.css\";\n\ntype CompletionCellProps = {\n  completed?: boolean;\n};\n\ntype CompletionGridProps = {\n  completedCount: number;\n  totalCount: number;\n};\n\nconst CompletionCell: React.FC<CompletionCellProps> = ({ completed }) => (\n  <div>{completed ? \"!\" : \"?\"}</div>\n);\n\nexport const CompletionGrid: React.FC<CompletionGridProps> = ({\n  completedCount,\n  totalCount\n}) => (\n  <div className={styles.grid}>\n    {Array(completedCount)\n      .fill(0)\n      .map((_, i) => (\n        <CompletionCell completed key={i} />\n      ))}\n    {Array(totalCount - completedCount)\n      .fill(0)\n      .map((_, i) => (\n        <CompletionCell key={i} />\n      ))}\n  </div>\n);\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport { useList } from \"react-use\";\nimport { CompletionGrid } from \"../Base\";\n\ntype CompletionGridWorkerProps = {\n  isStarted: boolean;\n  worker: Worker;\n};\n\nconst CompletionGridWorker: React.FC<CompletionGridWorkerProps> = ({\n  isStarted,\n  worker\n}) => {\n  const [completedCount, updateCount] = useState(0);\n\n  useEffect(() => {\n    if(isStarted) worker.postMessage(\"start\");\n  }, [worker, isStarted]);\n\n  useEffect(() => {\n    worker.onmessage = () =>\n      updateCount((completedCount: number) => completedCount + 1);\n  }, [worker]);\n\n  return <CompletionGrid completedCount={completedCount} totalCount={100} />;\n};\n\nexport default CompletionGridWorker;\n","import React, { useEffect, useState } from \"react\";\nimport { useList } from \"react-use\";\nimport CompletionGridWorker from \"../BaseWorker\";\nimport Worker from \"../../workers/worker.worker\";\n\n// @ts-ignore\nconst worker = new Worker();\n\nconst CompletionGridNormal: React.FC<{ isStarted: boolean }> = ({isStarted}) => (\n  <CompletionGridWorker isStarted={isStarted} worker={worker} />\n);\n\nexport default CompletionGridNormal;\n","import React, { useEffect, useState } from \"react\";\nimport CompletionGridWorker from \"../BaseWorker\";\nimport Worker from \"../../workers/gpuworker.worker\";\n\n// @ts-ignore\nconst worker = new Worker();\n\nconst CompletionGridGPGPU: React.FC<{isStarted: boolean}> = ({isStarted}) => (\n  <CompletionGridWorker isStarted={isStarted} worker={worker} />\n);\n\nexport default CompletionGridGPGPU;\n","import React, { useState } from \"react\";\nimport VanillaCompletionGrid from \"./CompletionGrid/Vanilla\";\nimport GpgpuCompletionGrid from \"./CompletionGrid/GPGPU\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  const [isStarted, setIsStarted] = useState(false);\n  const start = () => setIsStarted(true);\n\n  return (\n    <header className=\"root\">\n      <h1>Demo</h1>\n      <button disabled={isStarted} onClick={start}>Start</button>\n      <div className=\"demo-container\">\n        <div className=\"grid-wrapper\">\n          <h2>Vanilla Javascript</h2>\n          <VanillaCompletionGrid isStarted={isStarted}/>\n        </div>\n        <div className=\"grid-wrapper\">\n          <h2>Uses the GPU</h2>\n          <GpgpuCompletionGrid isStarted={isStarted}/>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
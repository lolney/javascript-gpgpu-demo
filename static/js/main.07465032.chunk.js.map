{"version":3,"sources":["CompletionGrid/Base/styles.module.css","workers/gpuworker.worker.ts","workers/worker.worker.ts","index.css","App.css","CompletionGrid/Base/index.tsx","CompletionGrid/BaseWorker/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CompletionCell","completed","color","CompletionGrid","completedCount","totalCount","styles","grid","Array","fill","map","_","i","CompletionGridWorker","isStarted","setDone","Worker","useState","updateCount","worker","setWorker","useEffect","postMessage","terminate","undefined","onmessage","App","setIsStarted","workersCompleted","setWorkersCompleted","start","useCallback","stop","state","VanillaWorker","GpuWorker","isLocalhost","Boolean","window","location","hostname","match","register","config","process","navigator","publicUrl","URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","fetch","response","contentType","headers","get","status","indexOf","unregister","reload","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.07465032.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"styles_grid__1Zp-5\"};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"5e614bfba70368257bf1.worker.js\");\n};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"268f479d3c772a8dbb3c.worker.js\");\n};","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","import React from \"react\";\nimport styles from \"./styles.module.css\";\n\ntype CompletionCellProps = {\n  completed?: boolean;\n};\n\ntype CompletionGridProps = {\n  completedCount: number;\n  totalCount: number;\n};\n\nconst CompletionCell: React.FC<CompletionCellProps> = ({ completed }) => (\n  <div style={{color: completed ? 'green' : 'red'}}>{completed ? \"✔\" : \"❓\"}</div>\n);\n\nexport const CompletionGrid: React.FC<CompletionGridProps> = ({\n  completedCount,\n  totalCount\n}) => (\n  <div className={styles.grid}>\n    {Array(completedCount)\n      .fill(0)\n      .map((_, i) => (\n        <CompletionCell completed key={i} />\n      ))}\n    {Array(totalCount - completedCount)\n      .fill(0)\n      .map((_, i) => (\n        <CompletionCell key={i} />\n      ))}\n  </div>\n);\n","import React, { useEffect, useState } from \"react\";\nimport { CompletionGrid } from \"../Base\";\n\ntype CompletionGridWorkerProps = {\n  isStarted: boolean;\n  setDone: () => void,\n  Worker: Worker\n};\n\n// worker-loader typings are incorrect; should be this\ntype WorkerConstructor = new () => Worker;\n\nconst CompletionGridWorker: React.FC<CompletionGridWorkerProps> = ({\n  isStarted,\n  setDone,\n  Worker\n}) => {\n  const [completedCount, updateCount] = useState(0);\n  const [worker, setWorker] = useState<Worker | undefined>();\n\n  useEffect(() => {\n    if(isStarted && !worker) {\n      const worker = new (Worker as any as WorkerConstructor)();\n      updateCount(0);\n      worker.postMessage(\"start\");\n      setWorker(worker);\n    }\n    else if(!isStarted && worker) {\n      worker.terminate();\n      setWorker(undefined);\n    }\n  }, [Worker, worker, isStarted]);\n\n  useEffect(() => {\n    if(worker) worker.onmessage = () =>\n      updateCount((completedCount: number) => completedCount + 1);\n  }, [worker]);\n\n  useEffect(() => {\n    if (completedCount === 100)\n      setDone();\n  }, [setDone, completedCount]);\n\n\n  return <CompletionGrid completedCount={completedCount} totalCount={100} />;\n};\n\nexport default CompletionGridWorker;\n","import React, { useState, useCallback } from \"react\";\nimport CompletionGrid from \"./CompletionGrid/BaseWorker\";\nimport GpuWorker from './workers/gpuworker.worker';\nimport VanillaWorker from './workers/worker.worker';\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  const [isStarted, setIsStarted] = useState(false);\n  const [workersCompleted, setWorkersCompleted] = useState(0);\n\n  const start = useCallback(() => {\n    setIsStarted(true);\n    setWorkersCompleted(0);\n  }, []);\n\n  const stop = useCallback(() => {\n    setIsStarted(false);\n    setWorkersCompleted(0);\n  }, []);\n  \n  const setDone = useCallback(() => {\n    if(workersCompleted === 1) stop();\n    else setWorkersCompleted(state => state + 1);\n  }, []);\n\n  return (\n    <header className=\"root\">\n      <h1>Demo</h1>\n      <button onClick={isStarted ? stop : start}>{isStarted ? \"Stop\" : \"Start\"}</button>\n      <div className=\"demo-container\">\n        <div className=\"grid-wrapper\">\n          <h2>Vanilla Javascript</h2>\n          <CompletionGrid isStarted={isStarted} setDone={setDone} Worker={VanillaWorker}/>\n        </div>\n        <div className=\"grid-wrapper\">\n          <h2>Uses the GPU</h2>\n          <CompletionGrid isStarted={isStarted} setDone={setDone} Worker={GpuWorker} />\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}